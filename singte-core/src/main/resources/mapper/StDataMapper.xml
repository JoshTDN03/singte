<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.sixlab.minesoft.singte.core.mapper.StDataMapper" >
  <resultMap id="BaseResultMap" type="cn.sixlab.minesoft.singte.core.models.StData" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="data_group" property="dataGroup" jdbcType="VARCHAR" />
    <result column="data_key" property="dataKey" jdbcType="VARCHAR" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="cn.sixlab.minesoft.singte.core.models.StData" extends="BaseResultMap" >
    <result column="data_content" property="dataContent" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, data_group, data_key, create_time
  </sql>
  <sql id="Blob_Column_List" >
    data_content
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from st_data
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from st_data
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="cn.sixlab.minesoft.singte.core.models.StData" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into st_data (data_group, data_key, create_time, 
      data_content)
    values (#{dataGroup,jdbcType=VARCHAR}, #{dataKey,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{dataContent,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="cn.sixlab.minesoft.singte.core.models.StData" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into st_data
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="dataGroup != null" >
        data_group,
      </if>
      <if test="dataKey != null" >
        data_key,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
      <if test="dataContent != null" >
        data_content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="dataGroup != null" >
        #{dataGroup,jdbcType=VARCHAR},
      </if>
      <if test="dataKey != null" >
        #{dataKey,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dataContent != null" >
        #{dataContent,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.sixlab.minesoft.singte.core.models.StData" >
    update st_data
    <set >
      <if test="dataGroup != null" >
        data_group = #{dataGroup,jdbcType=VARCHAR},
      </if>
      <if test="dataKey != null" >
        data_key = #{dataKey,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="dataContent != null" >
        data_content = #{dataContent,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="cn.sixlab.minesoft.singte.core.models.StData" >
    update st_data
    set data_group = #{dataGroup,jdbcType=VARCHAR},
      data_key = #{dataKey,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      data_content = #{dataContent,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.sixlab.minesoft.singte.core.models.StData" >
    update st_data
    set data_group = #{dataGroup,jdbcType=VARCHAR},
      data_key = #{dataKey,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

<!--  -->

  <select id="selectByGroup" resultMap="ResultMapWithBLOBs" parameterType="java.lang.String">
    select
    <include refid="Base_Column_List"/>
    ,
    <include refid="Blob_Column_List"/>
    from st_data
    where data_group = #{dataGroup,jdbcType=VARCHAR}
  </select>

  <select id="selectByGroupKey" resultMap="ResultMapWithBLOBs">
    select
    <include refid="Base_Column_List"/>
    ,
    <include refid="Blob_Column_List"/>
    from st_data
    where data_group = #{dataGroup,jdbcType=VARCHAR}
    and   data_key = #{dataKey,jdbcType=VARCHAR}
    order by id limit 1
  </select>
</mapper>