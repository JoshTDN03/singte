<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="cn.sixlab.minesoft.singte.core.mapper.StePoemAtomMapper" >
  <resultMap id="BaseResultMap" type="cn.sixlab.minesoft.singte.module.minesoft.models.StePoemAtom" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="poem_id" property="poemId" jdbcType="INTEGER" />
    <result column="poem_name" property="poemName" jdbcType="VARCHAR" />
    <result column="atom_content" property="atomContent" jdbcType="VARCHAR" />
    <result column="atom_order" property="atomOrder" jdbcType="INTEGER" />
    <result column="create_time" property="createTime" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, poem_id, poem_name, atom_content, atom_order, create_time
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from ste_poem_atom
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from ste_poem_atom
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="cn.sixlab.minesoft.singte.module.minesoft.models.StePoemAtom" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into ste_poem_atom (poem_id, poem_name, atom_content, 
      atom_order, create_time)
    values (#{poemId,jdbcType=INTEGER}, #{poemName,jdbcType=VARCHAR}, #{atomContent,jdbcType=VARCHAR}, 
      #{atomOrder,jdbcType=INTEGER}, #{createTime,jdbcType=TIMESTAMP})
  </insert>
  <insert id="insertSelective" parameterType="cn.sixlab.minesoft.singte.module.minesoft.models.StePoemAtom" >
    <selectKey resultType="java.lang.Integer" keyProperty="id" order="AFTER" >
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into ste_poem_atom
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="poemId != null" >
        poem_id,
      </if>
      <if test="poemName != null" >
        poem_name,
      </if>
      <if test="atomContent != null" >
        atom_content,
      </if>
      <if test="atomOrder != null" >
        atom_order,
      </if>
      <if test="createTime != null" >
        create_time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="poemId != null" >
        #{poemId,jdbcType=INTEGER},
      </if>
      <if test="poemName != null" >
        #{poemName,jdbcType=VARCHAR},
      </if>
      <if test="atomContent != null" >
        #{atomContent,jdbcType=VARCHAR},
      </if>
      <if test="atomOrder != null" >
        #{atomOrder,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="cn.sixlab.minesoft.singte.module.minesoft.models.StePoemAtom" >
    update ste_poem_atom
    <set >
      <if test="poemId != null" >
        poem_id = #{poemId,jdbcType=INTEGER},
      </if>
      <if test="poemName != null" >
        poem_name = #{poemName,jdbcType=VARCHAR},
      </if>
      <if test="atomContent != null" >
        atom_content = #{atomContent,jdbcType=VARCHAR},
      </if>
      <if test="atomOrder != null" >
        atom_order = #{atomOrder,jdbcType=INTEGER},
      </if>
      <if test="createTime != null" >
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="cn.sixlab.minesoft.singte.module.minesoft.models.StePoemAtom" >
    update ste_poem_atom
    set poem_id = #{poemId,jdbcType=INTEGER},
      poem_name = #{poemName,jdbcType=VARCHAR},
      atom_content = #{atomContent,jdbcType=VARCHAR},
      atom_order = #{atomOrder,jdbcType=INTEGER},
      create_time = #{createTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>

<!--  -->

  <select id="selectByKeywords" resultMap="BaseResultMap" >
    select
    <include refid="Base_Column_List" />
    from ste_poem_atom

    <if test=" null!= keywordList and keywordList.length>0 ">
      where <foreach collection="keywordList" item="item" index="index" separator=" and ">
                atom_content like concat('%', '${item}','%')
            </foreach>
    </if>

    order by atom_order
  </select>
</mapper>